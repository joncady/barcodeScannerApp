{"version":3,"sources":["App.js","serviceWorker.js","Config.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","prevState","modal","codeDetected","addItem","_this$state","state","dbRef","modalTitle","add","name","then","success","modalMessage","modalPic","_this2","Quagga","init","inputStream","type","target","document","querySelector","decoder","readers","debug","drawBoundingBox","err","console","log","start","onDetected","data","setCode","codeResult","code","db","firebase","firestore","collection","_this3","axios","get","params","response","items","title","desc","description","react_default","a","createElement","className","id","Modal","style","padding","isOpen","ModalHeader","src","alt","dangerouslySetInnerHTML","__html","Button","onClick","Component","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","initializeApp","Config","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRA0HeA,cAjHd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA2CDI,OAAS,WACRP,EAAKQ,SAAS,SAAAC,GAAS,MAAK,CAC3BC,OAAQD,EAAUC,MAClBC,cAAc,MA/CFX,EAmFdY,QAAU,WAAM,IAAAC,EACeb,EAAKc,MAA3BC,EADOF,EACPE,MAAOC,EADAH,EACAG,WACfD,EAAME,IAAI,CACTC,KAAMF,IAENG,KAAK,WACLnB,EAAKQ,SAAS,CACbY,SAAS,EACTV,OAAO,OAzFTV,EAAKc,MAAQ,CACZH,cAAc,EACdD,OAAO,EACPW,aAAc,GACdL,WAAY,GACZM,SAAU,KACVF,SAAS,GARGpB,mFAYM,IAAAuB,EAAApB,KACnBqB,IAAOC,KAAK,CACXC,YAAa,CACZR,KAAM,OACNS,KAAM,aACNC,OAAQC,SAASC,cAAc,aAEhCC,QAAS,CACRC,QAAS,CAAC,kBAAmB,aAAc,gBAC3CC,MAAO,CACNC,iBAAiB,KAGjB,SAAUC,GACRA,EACHC,QAAQC,IAAIF,IAGbC,QAAQC,IAAI,2CACZb,IAAOc,WAERd,IAAOe,WAAW,SAACC,GACbjB,EAAKT,MAAMH,cACfY,EAAKkB,QAAQD,EAAKE,WAAWC,QAG/B,IAAIC,EAAKC,IAASC,YAAYC,WAAW,gBACzC5C,KAAKK,SAAS,CACbO,MAAO6B,oCAWDJ,GAAM,IAAAQ,EAAA7C,KACbA,KAAKK,SAAS,CACbG,cAAc,GACZ,WACFsC,IAAMC,IAAI,wCAAyC,CAClDC,OAAQ,CACPR,KAAMH,KAGNrB,KAAK,SAACiC,GACN,IACC,IAAIZ,EAAOY,EAASZ,KAAKa,MAAM,GAC3BC,EAAQd,EAAKc,MACbC,EAAOf,EAAKgB,YAChBR,EAAKxC,SAAS,CACbE,OAAO,EACPM,WAAYsC,EACZjC,aAAckC,EACdnC,SAAS,IAET,MAAOe,GACRa,EAAKxC,SAAS,CACbE,OAAO,EACPM,WAAY,SACZK,aAAc,oBACdD,SAAS,0CAqBd,OACCqC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,WACvBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,MAAO,CAAEC,QAAS,QAAUC,OAAQ9D,KAAKW,MAAMJ,MAAOH,OAAQJ,KAAKI,QACzEkD,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAa3D,OAAQJ,KAAKI,QAASJ,KAAKW,MAAME,YAC7Cb,KAAKW,MAAMQ,UAAYmC,EAAAC,EAAAC,cAAA,OAAKQ,IAAKhE,KAAKW,MAAMQ,SAAU8C,IAAI,SAC3DX,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKU,wBAAyB,CAAEC,OAAQnE,KAAKW,MAAMO,iBAGnDlB,KAAKW,MAAMM,SAAWqC,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQC,QAASrE,KAAKS,SAAtB,qBA5GV6D,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IASeC,EATF,CACTC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,+BCGvBxC,EAASyC,cAAcC,GAEvBC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAAS7D,SAAS8D,eAAe,SFsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3E,KAAK,SAAA4E,GACjCA,EAAaC","file":"static/js/main.3ae535ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Quagga from 'quagga';\nimport axios from 'axios';\nimport { Modal, ModalHeader, Button } from 'reactstrap';\nimport 'firebase/firestore';\nimport firebase from 'firebase';\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcodeDetected: false,\n\t\t\tmodal: false,\n\t\t\tmodalMessage: '',\n\t\t\tmodalTitle: '',\n\t\t\tmodalPic: null,\n\t\t\tsuccess: false\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tQuagga.init({\n\t\t\tinputStream: {\n\t\t\t\tname: \"Live\",\n\t\t\t\ttype: \"LiveStream\",\n\t\t\t\ttarget: document.querySelector('#barcode')    // Or '#yourElement' (optional)\n\t\t\t},\n\t\t\tdecoder: {\n\t\t\t\treaders: [\"code_128_reader\", \"upc_reader\", \"upc_e_reader\"],\n\t\t\t\tdebug: {\n\t\t\t\t\tdrawBoundingBox: true\n\t\t\t\t}\n\t\t\t}\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconsole.log(\"Initialization finished. Ready to start\");\n\t\t\tQuagga.start();\n\t\t});\n\t\tQuagga.onDetected((data) => {\n\t\t\tif (!this.state.codeDetected) {\n\t\t\t\tthis.setCode(data.codeResult.code);\n\t\t\t}\n\t\t});\n\t\tlet db = firebase.firestore().collection('fridge-items');\n\t\tthis.setState({\n\t\t\tdbRef: db\n\t\t});\n\t}\n\n\ttoggle = () => {\n\t\tthis.setState(prevState => ({\n\t\t\tmodal: !prevState.modal,\n\t\t\tcodeDetected: false\n\t\t}));\n\t}\n\n\tsetCode(data) {\n\t\tthis.setState({\n\t\t\tcodeDetected: true\n\t\t}, () => {\n\t\t\taxios.get('https://duetwithme.herokuapp.com/code', {\n\t\t\t\tparams: {\n\t\t\t\t\tcode: data\n\t\t\t\t}\n\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet data = response.data.items[0];\n\t\t\t\t\t\tlet title = data.title;\n\t\t\t\t\t\tlet desc = data.description;\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tmodal: true,\n\t\t\t\t\t\t\tmodalTitle: title,\n\t\t\t\t\t\t\tmodalMessage: desc,\n\t\t\t\t\t\t\tsuccess: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tmodal: true,\n\t\t\t\t\t\t\tmodalTitle: \"Error!\",\n\t\t\t\t\t\t\tmodalMessage: \"Please try again!\",\n\t\t\t\t\t\t\tsuccess: false\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\taddItem = () => {\n\t\tconst { dbRef, modalTitle } = this.state;\n\t\tdbRef.add({\n\t\t\tname: modalTitle\n\t\t})\n\t\t.then(() => {\n\t\t\tthis.setState({\n\t\t\t\tsuccess: false,\n\t\t\t\tmodal: false\n\t\t\t});\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\" id=\"barcode\">\n\t\t\t\t<Modal style={{ padding: '1rem' }} isOpen={this.state.modal} toggle={this.toggle}>\n\t\t\t\t\t<ModalHeader toggle={this.toggle}>{this.state.modalTitle}</ModalHeader>\n\t\t\t\t\t{this.state.modalPic && <img src={this.state.modalPic} alt=\"Item\"></img>}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: this.state.modalMessage }}>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.state.success && <Button onClick={this.addItem}>Add Item</Button>}\n\t\t\t\t</Modal>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let config = {\r\n    apiKey: \"AIzaSyCzeQfCXoh3qQFU3ywbVjTA_Oi1PWttLJI\",\r\n    authDomain: \"roommate-sync.firebaseapp.com\",\r\n    databaseURL: \"https://roommate-sync.firebaseio.com\",\r\n    projectId: \"roommate-sync\",\r\n    storageBucket: \"roommate-sync.appspot.com\",\r\n    messagingSenderId: \"132009164853\"\r\n};\r\n\r\nexport default config;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Config from './Config';\nimport firebase from 'firebase/app';\n\nfirebase.initializeApp(Config);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}